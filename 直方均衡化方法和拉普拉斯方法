#include<opencv2/core/core.hpp>  
#include <opencv2/imgproc/imgproc.hpp>  
#include<opencv2/highgui/highgui.hpp>  
#include<iostream>  
using namespace std;
using namespace cv;


int main() {

	/*Mat类型：基本上讲 Mat 是一个类，由两个数据部分组成：矩阵头（包含矩阵尺寸，存储方法，存储地址等信息）和一个指向存储所有像素
	值的矩阵的指针（根据所选存储方法的不同矩阵可以是不同的维数）。矩阵头的尺寸是常数值，
	但矩阵本身的尺寸会依图像的不同而不同，通常比矩阵头的尺寸大数个数量级。因此，当在程序中传递图像并创建拷贝时，大的开销是
	由矩阵造成的，而不是信息头。我们不应该拷贝 大 的图像，因为这会降低程序速度。为了搞定这个问题，OpenCV使用引用计数机制。
	其思路是让每个 Mat 对象有自己的信息头，但共享同一个矩阵。这通过让矩阵指针指向同一地址而实现。而拷贝构造函数则 只拷贝信
	息头和矩阵指针 ，而不拷贝矩阵。*/

	Mat srcImage = imread("jpg/new1.bmp", CV_LOAD_IMAGE_ANYDEPTH | CV_LOAD_IMAGE_ANYCOLOR);//srcImage是原图，深度，颜色均不变.
	namedWindow("originalPic", WINDOW_NORMAL);
	/*可以调用destroyWindow()或者destroyAllWindows()函数来关闭窗口，并取消之前分配的与窗口相关的所有内存空间。
		但其实对于代码量不大的简单小程序来说，我们完全没有必要手动调用上述的destroyWindow()或者destroyAllWindows()函数，
		因为在退出时，所有的资源和应用程序的窗口会被操作系统会自动关闭。
	*/
	if (!srcImage.data) {
		cout << "读取不到图片" << endl;
		return 0;
	}
	imshow("originalPic", srcImage);
	/***********灰度化*****************/
	Mat grayImage = imread("jpg/new1.bmp", CV_LOAD_IMAGE_GRAYSCALE);
	namedWindow("grayPic", WINDOW_NORMAL);
	imshow("grayPic", grayImage);
	imwrite("optJpg/new1.bmp", grayImage);
	/****************直方图均衡化图像增强*************************/
	Mat equlizeImage;
	equalizeHist(grayImage, equlizeImage);
	namedWindow("直方图均衡化图像增强效果", WINDOW_NORMAL);
	imshow("直方图均衡化图像增强效果", equlizeImage);
	
	/************直方图均衡化图像增强结束*************************/
	/**********中心为5的8邻域拉普拉斯算子***********************/
	Mat imageEnhance;
	Mat kernel = (Mat_<float>(3, 3) << 0, -1, 0, 0, 3, 0, 0, -1, 0);
	filter2D(grayImage, imageEnhance, CV_8UC1, kernel);//filter2D是卷积运算函数
	namedWindow("拉普拉斯算子图像增强效果", WINDOW_NORMAL);
	imshow("拉普拉斯算子图像增强效果", imageEnhance);
	/**************中心为5的8邻域拉普拉斯算子结束****************/

	
	waitKey(0);
	return 1;

	
}
